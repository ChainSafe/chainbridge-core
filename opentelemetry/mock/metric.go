// Code generated by MockGen. DO NOT EDIT.
// Source: go.opentelemetry.io/otel/metric (interfaces: MeterImpl)

// Package mock_opentelemetry is a generated GoMock package.
package mock_opentelemetry

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	attribute "go.opentelemetry.io/otel/attribute"
	metric "go.opentelemetry.io/otel/metric"
)

// MockMeterImpl is a mock of MeterImpl interface.
type MockMeterImpl struct {
	ctrl     *gomock.Controller
	recorder *MockMeterImplMockRecorder
}

// MockMeterImplMockRecorder is the mock recorder for MockMeterImpl.
type MockMeterImplMockRecorder struct {
	mock *MockMeterImpl
}

// NewMockMeterImpl creates a new mock instance.
func NewMockMeterImpl(ctrl *gomock.Controller) *MockMeterImpl {
	mock := &MockMeterImpl{ctrl: ctrl}
	mock.recorder = &MockMeterImplMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMeterImpl) EXPECT() *MockMeterImplMockRecorder {
	return m.recorder
}

// NewAsyncInstrument mocks base method.
func (m *MockMeterImpl) NewAsyncInstrument(arg0 metric.Descriptor, arg1 metric.AsyncRunner) (metric.AsyncImpl, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewAsyncInstrument", arg0, arg1)
	ret0, _ := ret[0].(metric.AsyncImpl)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewAsyncInstrument indicates an expected call of NewAsyncInstrument.
func (mr *MockMeterImplMockRecorder) NewAsyncInstrument(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewAsyncInstrument", reflect.TypeOf((*MockMeterImpl)(nil).NewAsyncInstrument), arg0, arg1)
}

// NewSyncInstrument mocks base method.
func (m *MockMeterImpl) NewSyncInstrument(arg0 metric.Descriptor) (metric.SyncImpl, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewSyncInstrument", arg0)
	ret0, _ := ret[0].(metric.SyncImpl)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewSyncInstrument indicates an expected call of NewSyncInstrument.
func (mr *MockMeterImplMockRecorder) NewSyncInstrument(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewSyncInstrument", reflect.TypeOf((*MockMeterImpl)(nil).NewSyncInstrument), arg0)
}

// RecordBatch mocks base method.
func (m *MockMeterImpl) RecordBatch(arg0 context.Context, arg1 []attribute.KeyValue, arg2 ...metric.Measurement) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "RecordBatch", varargs...)
}

// RecordBatch indicates an expected call of RecordBatch.
func (mr *MockMeterImplMockRecorder) RecordBatch(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordBatch", reflect.TypeOf((*MockMeterImpl)(nil).RecordBatch), varargs...)
}
