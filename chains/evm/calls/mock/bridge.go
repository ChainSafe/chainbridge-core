// Code generated by MockGen. DO NOT EDIT.
// Source: chains/evm/calls/bridge.go

// Package mock_calls is a generated GoMock package.
package mock_calls

import (
	context "context"
	big "math/big"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockContractCallerClient is a mock of ContractCallerClient interface.
type MockContractCallerClient struct {
	ctrl     *gomock.Controller
	recorder *MockContractCallerClientMockRecorder
}

// MockContractCallerClientMockRecorder is the mock recorder for MockContractCallerClient.
type MockContractCallerClientMockRecorder struct {
	mock *MockContractCallerClient
}

// NewMockContractCallerClient creates a new mock instance.
func NewMockContractCallerClient(ctrl *gomock.Controller) *MockContractCallerClient {
	mock := &MockContractCallerClient{ctrl: ctrl}
	mock.recorder = &MockContractCallerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContractCallerClient) EXPECT() *MockContractCallerClientMockRecorder {
	return m.recorder
}

// CallContract mocks base method.
func (m *MockContractCallerClient) CallContract(ctx context.Context, callArgs map[string]interface{}, blockNumber *big.Int) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallContract", ctx, callArgs, blockNumber)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallContract indicates an expected call of CallContract.
func (mr *MockContractCallerClientMockRecorder) CallContract(ctx, callArgs, blockNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallContract", reflect.TypeOf((*MockContractCallerClient)(nil).CallContract), ctx, callArgs, blockNumber)
}
