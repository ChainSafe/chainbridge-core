// Code generated by MockGen. DO NOT EDIT.
// Source: ./chains/evm/calls/evmgaspricer/gas-pricer.go

// Package mock_evmgaspricer is a generated GoMock package.
package mock_evmgaspricer

import (
	context "context"
	big "math/big"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockLondonGasClient is a mock of LondonGasClient interface.
type MockLondonGasClient struct {
	ctrl     *gomock.Controller
	recorder *MockLondonGasClientMockRecorder
}

// MockLondonGasClientMockRecorder is the mock recorder for MockLondonGasClient.
type MockLondonGasClientMockRecorder struct {
	mock *MockLondonGasClient
}

// NewMockLondonGasClient creates a new mock instance.
func NewMockLondonGasClient(ctrl *gomock.Controller) *MockLondonGasClient {
	mock := &MockLondonGasClient{ctrl: ctrl}
	mock.recorder = &MockLondonGasClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLondonGasClient) EXPECT() *MockLondonGasClientMockRecorder {
	return m.recorder
}

// BaseFee mocks base method.
func (m *MockLondonGasClient) BaseFee() (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BaseFee")
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BaseFee indicates an expected call of BaseFee.
func (mr *MockLondonGasClientMockRecorder) BaseFee() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BaseFee", reflect.TypeOf((*MockLondonGasClient)(nil).BaseFee))
}

// SuggestGasPrice mocks base method.
func (m *MockLondonGasClient) SuggestGasPrice(ctx context.Context) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SuggestGasPrice", ctx)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SuggestGasPrice indicates an expected call of SuggestGasPrice.
func (mr *MockLondonGasClientMockRecorder) SuggestGasPrice(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SuggestGasPrice", reflect.TypeOf((*MockLondonGasClient)(nil).SuggestGasPrice), ctx)
}

// SuggestGasTipCap mocks base method.
func (m *MockLondonGasClient) SuggestGasTipCap(ctx context.Context) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SuggestGasTipCap", ctx)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SuggestGasTipCap indicates an expected call of SuggestGasTipCap.
func (mr *MockLondonGasClientMockRecorder) SuggestGasTipCap(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SuggestGasTipCap", reflect.TypeOf((*MockLondonGasClient)(nil).SuggestGasTipCap), ctx)
}

// MockGasPriceClient is a mock of GasPriceClient interface.
type MockGasPriceClient struct {
	ctrl     *gomock.Controller
	recorder *MockGasPriceClientMockRecorder
}

// MockGasPriceClientMockRecorder is the mock recorder for MockGasPriceClient.
type MockGasPriceClientMockRecorder struct {
	mock *MockGasPriceClient
}

// NewMockGasPriceClient creates a new mock instance.
func NewMockGasPriceClient(ctrl *gomock.Controller) *MockGasPriceClient {
	mock := &MockGasPriceClient{ctrl: ctrl}
	mock.recorder = &MockGasPriceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGasPriceClient) EXPECT() *MockGasPriceClientMockRecorder {
	return m.recorder
}

// SuggestGasPrice mocks base method.
func (m *MockGasPriceClient) SuggestGasPrice(ctx context.Context) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SuggestGasPrice", ctx)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SuggestGasPrice indicates an expected call of SuggestGasPrice.
func (mr *MockGasPriceClientMockRecorder) SuggestGasPrice(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SuggestGasPrice", reflect.TypeOf((*MockGasPriceClient)(nil).SuggestGasPrice), ctx)
}
